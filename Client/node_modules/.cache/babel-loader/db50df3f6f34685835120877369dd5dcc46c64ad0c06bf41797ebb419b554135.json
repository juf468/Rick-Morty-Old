{"ast":null,"code":"// esta funcion esta apartada y esta dentro de la carpeta form por ser especial para form y para modularizar\n//tiene que validar username y password\n// EMAIL=>>\n// el nombre de usuario tiene que ser un email (¡Explora validaciónes REGEX en internet!)./// //^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i\n// el nombre de usuario no puede estar vacío.\n// el nombre de usuario no puede tener más de 35 caracteres.\n// PASSWORD=>>\n// la contraseña tiene que tener al menos un número.\n// la contraseña tiene que tener una longitud entre 6 y 10 caracteres.\n//EL VALIDADOR NO PUEDE MODIFICAR LA DATA\n\nconst validation = (userData, errors, setErrors) => {\n  // creo la funcion y le paso  userdata, errors (del estado que acabo de crear)y el setErrosrs\n  //=>> que es la funcion del usestate de errors  x arg porque es lo que busco validar\n  //validacion del username :\n\n  if (!userData.username) {\n    return setErrors({\n      ...errors,\n      username: 'por favor completa este campo'\n    });\n  }\n  if (userData.username.length > 35) {\n    return setErrors({\n      ...errors,\n      username: 'no puede superar los 35 caracteres'\n    });\n  }\n  if (!/^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{3})+$/.test(userData.username)) {\n    return setErrors({\n      ...errors,\n      username: 'email invalido'\n    });\n  }\n  setErrors({\n    ...errors,\n    username: ''\n  });\n\n  //validacion de password :\n  //     la contraseña tiene que tener al menos un número.\n  // la contraseña tiene que tener una longitud entre 6 y 10 caracteres.\n\n  // if (!/^(?=.*\\d).{6,10}$/.test(userData.password)) {\n  // \treturn setErrors({ ...errors, password: 'debe tener al menos un numero' });\n  // }\n  if (!userData.password.length < 6 || userData.password.length > 10) {\n    return setErrors({\n      ...errors,\n      password: 'debe tener entre 6 y 10 caracteres'\n    });\n  }\n  if (!/\\d/.test(userData.password)) {\n    return setErrors({\n      ...errors,\n      password: 'debe tener al menos un numero'\n    });\n  }\n  return setErrors({\n    ...errors,\n    password: ''\n  });\n};\nexport default validation;","map":{"version":3,"names":["validation","userData","errors","setErrors","username","length","test","password"],"sources":["/Users/juliafranchi/Documents/code/rick-and-morty/Client/src/components/Form/Validation.js"],"sourcesContent":["// esta funcion esta apartada y esta dentro de la carpeta form por ser especial para form y para modularizar\n//tiene que validar username y password\n// EMAIL=>>\n// el nombre de usuario tiene que ser un email (¡Explora validaciónes REGEX en internet!)./// //^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i\n// el nombre de usuario no puede estar vacío.\n// el nombre de usuario no puede tener más de 35 caracteres.\n// PASSWORD=>>\n// la contraseña tiene que tener al menos un número.\n// la contraseña tiene que tener una longitud entre 6 y 10 caracteres.\n//EL VALIDADOR NO PUEDE MODIFICAR LA DATA\n\nconst validation = (userData, errors, setErrors) => {\n\t// creo la funcion y le paso  userdata, errors (del estado que acabo de crear)y el setErrosrs\n\t//=>> que es la funcion del usestate de errors  x arg porque es lo que busco validar\n\t//validacion del username :\n\n\tif (!userData.username) {\n\t\treturn setErrors({\n\t\t\t...errors,\n\t\t\tusername: 'por favor completa este campo',\n\t\t});\n\t}\n\tif (userData.username.length > 35) {\n\t\treturn setErrors({\n\t\t\t...errors,\n\t\t\tusername: 'no puede superar los 35 caracteres',\n\t\t});\n\t}\n\n\tif (!/^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{3})+$/.test(userData.username)) {\n\t\treturn setErrors({ ...errors, username: 'email invalido' });\n\t}\n\n\tsetErrors({ ...errors, username: '' });\n\n\t//validacion de password :\n\t//     la contraseña tiene que tener al menos un número.\n\t// la contraseña tiene que tener una longitud entre 6 y 10 caracteres.\n\n\t// if (!/^(?=.*\\d).{6,10}$/.test(userData.password)) {\n\t// \treturn setErrors({ ...errors, password: 'debe tener al menos un numero' });\n\t// }\n\tif (!userData.password.length < 6 || userData.password.length > 10) {\n\t\treturn setErrors({\n\t\t\t...errors,\n\t\t\tpassword: 'debe tener entre 6 y 10 caracteres',\n\t\t});\n\t}\n\tif (!/\\d/.test(userData.password)) {\n\t\treturn setErrors({ ...errors, password: 'debe tener al menos un numero' });\n\t}\n\treturn setErrors({ ...errors, password: '' });\n};\nexport default validation;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,UAAU,GAAGA,CAACC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,KAAK;EACnD;EACA;EACA;;EAEA,IAAI,CAACF,QAAQ,CAACG,QAAQ,EAAE;IACvB,OAAOD,SAAS,CAAC;MAChB,GAAGD,MAAM;MACTE,QAAQ,EAAE;IACX,CAAC,CAAC;EACH;EACA,IAAIH,QAAQ,CAACG,QAAQ,CAACC,MAAM,GAAG,EAAE,EAAE;IAClC,OAAOF,SAAS,CAAC;MAChB,GAAGD,MAAM;MACTE,QAAQ,EAAE;IACX,CAAC,CAAC;EACH;EAEA,IAAI,CAAC,2CAA2C,CAACE,IAAI,CAACL,QAAQ,CAACG,QAAQ,CAAC,EAAE;IACzE,OAAOD,SAAS,CAAC;MAAE,GAAGD,MAAM;MAAEE,QAAQ,EAAE;IAAiB,CAAC,CAAC;EAC5D;EAEAD,SAAS,CAAC;IAAE,GAAGD,MAAM;IAAEE,QAAQ,EAAE;EAAG,CAAC,CAAC;;EAEtC;EACA;EACA;;EAEA;EACA;EACA;EACA,IAAI,CAACH,QAAQ,CAACM,QAAQ,CAACF,MAAM,GAAG,CAAC,IAAIJ,QAAQ,CAACM,QAAQ,CAACF,MAAM,GAAG,EAAE,EAAE;IACnE,OAAOF,SAAS,CAAC;MAChB,GAAGD,MAAM;MACTK,QAAQ,EAAE;IACX,CAAC,CAAC;EACH;EACA,IAAI,CAAC,IAAI,CAACD,IAAI,CAACL,QAAQ,CAACM,QAAQ,CAAC,EAAE;IAClC,OAAOJ,SAAS,CAAC;MAAE,GAAGD,MAAM;MAAEK,QAAQ,EAAE;IAAgC,CAAC,CAAC;EAC3E;EACA,OAAOJ,SAAS,CAAC;IAAE,GAAGD,MAAM;IAAEK,QAAQ,EAAE;EAAG,CAAC,CAAC;AAC9C,CAAC;AACD,eAAeP,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}